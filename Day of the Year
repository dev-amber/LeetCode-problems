class Solution {
public:
    int dayOfYear(string date) {
         
        int year = std::stoi(date.substr(0, 4));
        int month = std::stoi(date.substr(5, 2));
        int day = std::stoi(date.substr(8, 2));
        
        // Days in each month
        std::vector<int> daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        
        // Check for leap year and adjust February days if needed
        if (isLeapYear(year)) {
            daysInMonth[1] = 29;
        }
        
        int dayOfYear = 0;
        
        // Add days from the previous months
        for (int i = 0; i < month - 1; ++i) {
            dayOfYear += daysInMonth[i];
        }
        
        // Add days of the current month
        dayOfYear += day;
        
        return dayOfYear;
    }

private:
    bool isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
};
